gc()
set.seed(42)
index = sample(1:nrow(sal),0.8*nrow(sal))
# Vamos criar a base de dados de treinamento
train = sal[index,]
# Vamos criar a base de dados de teste
test = sal[-index,]
# checando dimensões
dim(train)
dim(test)
cols = c('husage', 'husearns', 'huseduc', 'hushrs', 'age', 'educ', 'exper','lwage')
pre_proc_val <- preProcess(train[,cols],
method = c("center", "scale"))
train[,cols] = predict(pre_proc_val, train[,cols])
test[,cols] = predict(pre_proc_val, test[,cols])
summary(train[,cols])
summary(test[,cols])
#objeto com as variáveis que serão usadas
head(sal)
cols_reg <- c('husage', 'husunion', 'husearns', 'huseduc', 'husblck', 'hushisp',
'hushrs', 'kidge6', 'age', 'black', 'educ', 'hispanic', 'union',
'exper', 'kidlt6', 'lwage')
dummies <- dummyVars(lwage~husage + husunion + husearns + huseduc + husblck + hushisp +
hushrs + kidge6 + age + black + educ + hispanic + union +
exper + kidlt6, data = sal[,cols_reg])
train_dummies <- predict(dummies, newdata = train[,cols_reg])
test_dummies <- predict(dummies, newdata = train[,cols_reg])
print(dim(train_dummies))
print(dim(test_dummies))
x <- as.matrix(train_dummies)
y_train <- train$lwage
x_test <- as.matrix(test_dummies)
y_test <- test$lwage
lambdas <- 10^seq(2,-3,by =-.1)
ridge_lamb <- cv.glmnet(x, y_train, alpha = 0,
lambda = lambdas)
best_lambda_ridge <- ridge_lamb$lambda.min
best_lambda_ridge
start <- Sys.time()
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0,
family = 'gaussian',
lambda = best_lambda_ridge)
end <- Sys.time()
difftime(end, start, units="secs")
ridge_reg[["beta"]]
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
predictions_train <- predict(ridge_reg,
s = best_lambda_ridge,
newx = x)
eval_results(y_train, predictions_train, train)
predictions_test <- predict(ridge_reg,
s = best_lambda_ridge,
newx = x_test)
eval_results(y_test, predictions_test, test)
husage = (40-pre_proc_val[["mean"]][["husage"]])/
pre_proc_val[["std"]][["husage"]]
husunion = 0
husearns = (600-pre_proc_val[["mean"]][["husearns"]])/
pre_proc_val[["std"]][["husearns"]]
huseduc = (13-pre_proc_val[["mean"]][["huseduc"]])/
pre_proc_val[["std"]][["huseduc"]]
husblck = 1
hushisp = 0
hushrs = (40-pre_proc_val[["mean"]][["hushrs"]])/
pre_proc_val[["std"]][["hushrs"]]
kidge6 = 1
age = (38-pre_proc_val[["mean"]][["age"]])/
pre_proc_val[["std"]][["age"]]
black = 0
educ = (13-pre_proc_val[["mean"]][["educ"]])/
pre_proc_val[["std"]][["educ"]]
hispanic = 1
union = 0
exper = (18-pre_proc_val[["mean"]][["exper"]])/
pre_proc_val[["std"]][["exper"]]
kidlt6 = 1
our_pred = as.matrix(data.frame(husage=husage,
husunion=husunion,
husearns=husearns,
huseduc=huseduc,
husblck=husblck,
hushisp=hushisp,
hushrs=hushrs,
kidge6=kidge6,
age=age,
black=black,
educ=educ,
hispanic=hispanic,
union=union,
exper=exper,
kidlt6=kidlt6))
predict_our_ridge <- predict(ridge_reg,
s = best_lambda_ridge,
newx = our_pred)
predict_our_ridge
wage_pred_ridge=(predict_our_ridge*
pre_proc_val[["std"]][["lwage"]])+
pre_proc_val[["mean"]][["lwage"]]
wage_pred_ridge
n <- nrow(train)
m <- wage_pred_ridge
s <- pre_proc_val[["std"]][["lwage"]]
dam <- s/sqrt(n)
CIlwr_ridge <- m + (qnorm(0.025))*dam
CIupr_ridge <- m - (qnorm(0.025))*dam
CIlwr_ridge
CIupr_ridge
exp(wage_pred_ridge)
View(our_pred)
View(sal)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
tuneGrid <- expand.grid(k=c(1,3,5,7,9, 10))
knn <- train(tipo~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
confusionMatrix(predict.knn, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rna <- train(tipo~.,data = treino, method = "nnet", linout=1, trace=FALSE)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
control <- trainControl(method='cv', number = 10)
rna <- train(tipo~., data = treino, method="nnet", trainControl = control, linout =T, MaxNWts = 10000, maxit=2000, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
tuneGrid <- expand.grid(k=c(1,3,5,7,9, 10))
knn <- train(tipo~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
confusionMatrix(predict.knn, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rna <- train(tipo~.,data = treino, method = "nnet", linout=1, trace=FALSE)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
svm <- train(tipo~.,data = treino, method = "svmRadial")
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
svm <- train(tipo~.,data = treino, method = "svmRadial", trControl = control)
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
svm <- train(tipo~.,data = treino, method = "svmRadial", trControl = control)
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rf <- train(tipo~.,data = treino, method = "rf")
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
rf <- train(tipo~.,data = treino, method = "rf", trControl = control)
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
tuneGrid <- expand.grid(k=c(1,3,5,7,9, 10))
knn <- train(tipo~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
confusionMatrix(predict.knn, as.factor(teste$tipo))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
View(dados)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
View(dados)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
tuneGrid <- expand.grid(k=c(1,3,5,7,9, 10))
knn <- train(diabetes~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
confusionMatrix(predict.knn, as.factor(teste$diabetes))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rna <- train(diabetes~.,data = treino, method = "nnet", linout=1, trace=FALSE)
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
View(dados)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
View(treino)
rna <- train(diabetes~.,data = treino, method = "nnet", linout=1, trace=FALSE)
warnings()
rna <- train(diabetes~.,data = treino, method = "nnet",trace=FALSE)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
control <- trainControl(method='cv', number = 10)
rna <- train(diabetes~., data = treino, method="nnet", trainControl = control, linout =T, MaxNWts = 10000, maxit=2000, trace = F)
rna <- train(diabetes~., data = treino, method="nnet", trainControl = control, MaxNWts = 10000, maxit=2000, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
control <- trainControl(method='cv', number = 10)
rna <- train(diabetes~., data = treino, method="nnet", trainControl = control, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
rna <- train(diabetes~., data = treino, method="nnet", trainControl = control, MaxNWts = 10000, maxit=2000, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
rna <- train(diabetes~., data = treino, method="nnet", trainControl = control, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
confusionMatrix(predict.rna, as.factor(teste$diabetes))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
svm <- train(diabetes~.,data = treino, method = "svmRadial")
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm, as.factor(teste$diabetes))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
svm <- train(diabetes~.,data = treino, method = "svmRadial", trControl = control)
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
confusionMatrix(predict.svm, as.factor(teste$diabetes))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
View(dados)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rf <- train(diabetes~.,data = treino, method = "rf")
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf, as.factor(teste$diabetes))
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/10 - Diabetes - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$diabetes, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
rf <- train(diabetes~.,data = treino, method = "rf", trControl = control)
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
confusionMatrix(predict.rf, as.factor(teste$diabetes))
