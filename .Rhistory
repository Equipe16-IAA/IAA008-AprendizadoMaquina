knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
knn <- train(ChanceOfAdmit~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
View(teste)
View(teste)
rmse(teste$ChanceOfAdmit, predict.knn)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.knn, teste$ChanceOfAdmit)
syx(teste$ChanceOfAdmit, predict.knn)
mae(teste$ChanceOfAdmit, predict.knn)
cor(teste$ChanceOfAdmit, predict.knn, method = "pearson")
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/9 - Admissao - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$ChanceOfAdmit, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rna <- train(ChanceOfAdmit~.,data = treino, method = "nnet",trace=FALSE)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$ChanceOfAdmit, predict.knn)
mae(teste$ChanceOfAdmit, predict.knn)
cor(teste$ChanceOfAdmit, predict.knn, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.knn)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.knn, teste$ChanceOfAdmit)
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$ChanceOfAdmit, predict.rna)
mae(teste$ChanceOfAdmit, predict.rna)
cor(teste$ChanceOfAdmit, predict.rna, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.rna)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rna, teste$ChanceOfAdmit)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/9 - Admissao - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$ChanceOfAdmit, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
control <- trainControl(method='cv', number = 10)
rna <- train(ChanceOfAdmit~., data = treino, method="nnet", trainControl = control, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$ChanceOfAdmit, predict.rna)
mae(teste$ChanceOfAdmit, predict.rna)
cor(teste$ChanceOfAdmit, predict.rna, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.rna)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rna, teste$ChanceOfAdmit)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/9 - Admissao - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$ChanceOfAdmit, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
svm <- train(ChanceOfAdmit~.,data = treino, method = "svmRadial")
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
rmse(teste$ChanceOfAdmit, predict.svm)
mae(teste$ChanceOfAdmit, predict.svm)
cor(teste$ChanceOfAdmit, predict.svm, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.svm)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.svm, teste$ChanceOfAdmit)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/9 - Admissao - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$ChanceOfAdmit, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
svm <- train(ChanceOfAdmit~.,data = treino, method = "svmRadial", trControl = control)
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
rmse(teste$ChanceOfAdmit, predict.svm)
mae(teste$ChanceOfAdmit, predict.svm)
cor(teste$ChanceOfAdmit, predict.svm, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.svm)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.svm, teste$ChanceOfAdmit)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/9 - Admissao - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$ChanceOfAdmit, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rf <- train(ChanceOfAdmit~.,data = treino, method = "rf")
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
rmse(teste$ChanceOfAdmit, predict.rf)
mae(teste$ChanceOfAdmit, predict.rf)
cor(teste$ChanceOfAdmit, predict.rf, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.rf)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rf, teste$ChanceOfAdmit)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/9 - Admissao - Dados.csv", header = T)
dados$num <- NULL
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$ChanceOfAdmit, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
rf <- train(ChanceOfAdmit~.,data = treino, method = "rf", trControl = control)
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
rmse(teste$ChanceOfAdmit, predict.rf)
mae(teste$ChanceOfAdmit, predict.rf)
cor(teste$ChanceOfAdmit, predict.rf, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$ChanceOfAdmit, predict.rf)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rf, teste$ChanceOfAdmit)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
View(dados)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
tuneGrid <- expand.grid(k=c(1,3,5,7,9, 10))
knn <- train(biomassa~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
rmse(teste$biomassa, predict.knn)
mae(teste$biomassa, predict.knn)
cor(teste$biomassa, predict.knn, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$biomassa, predict.knn)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.knn, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rna <- train(biomassa~.,data = treino, method = "nnet",trace=FALSE)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$biomassa, predict.rna)
mae(teste$biomassa, predict.rna)
cor(teste$biomassa, predict.rna, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$biomassa, predict.rna)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rna, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
control <- trainControl(method='cv', number = 10)
rna <- train(biomassa~., data = treino, method="nnet", trainControl = control, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$biomassa, predict.rna)
mae(teste$biomassa, predict.rna)
cor(teste$biomassa, predict.rna, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$biomassa, predict.rna)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rna, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
svm <- train(biomassa~.,data = treino, method = "svmRadial")
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
rmse(teste$biomassa, predict.svm)
mae(teste$biomassa, predict.svm)
cor(teste$biomassa, predict.svm, method = "pearson")
#syx <- function(observados, estimados, n, p){ return sqrt((sum((observados-estimados)^2))/(n-p-1)) }
#syx(teste$biomassa, predict.svm)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.svm, teste$biomassa)
View(dados)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
svm <- train(biomassa~.,data = treino, method = "svmRadial")
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
rmse(teste$biomassa, predict.svm)
mae(teste$biomassa, predict.svm)
cor(teste$biomassa, predict.svm, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.svm,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.svm, teste$biomassa)
ncol(teste)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
svm <- train(biomassa~.,data = treino, method = "svmRadial", trControl = control)
svm
##Aplica o modelo no arquivo de teste
predict.svm <- predict(svm,teste)
rmse(teste$biomassa, predict.svm)
mae(teste$biomassa, predict.svm)
cor(teste$biomassa, predict.svm, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.svm,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.svm, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rf <- train(biomassa~.,data = treino, method = "rf")
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
rmse(teste$biomassa, predict.rf)
mae(teste$biomassa, predict.rf)
cor(teste$biomassa, predict.rf, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.rf,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rf, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
##Cross-Validation
control <- trainControl(method='cv', number = 10)
rf <- train(biomassa~.,data = treino, method = "rf", trControl = control)
rf
##Aplica o modelo no arquivo de teste
predict.rf <- predict(rf,teste)
rmse(teste$biomassa, predict.rf)
mae(teste$biomassa, predict.rf)
cor(teste$biomassa, predict.rf, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.rf,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rf, teste$biomassa)
source("D:/GIT/IAA008-AprendizadoMaquina/Codigo_TrabalhoFinal/Biomassa/knn_main.R")
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
tuneGrid <- expand.grid(k=c(1,3,5,7,9, 10))
knn <- train(biomassa~.,data = treino, method = "knn", tuneGrid=tuneGrid)
knn
##Aplica o modelo no arquivo de teste
predict.knn <- predict(knn,teste)
rmse(teste$biomassa, predict.knn)
mae(teste$biomassa, predict.knn)
cor(teste$biomassa, predict.knn, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.knn,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.knn, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
rna <- train(biomassa~.,data = treino, method = "nnet",trace=FALSE)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$biomassa, predict.rna)
mae(teste$biomassa, predict.rna)
cor(teste$biomassa, predict.rna, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.rna,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rna, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/5 - Biomassa - Dados.csv", header = T)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$biomassa, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
control <- trainControl(method='cv', number = 10)
rna <- train(biomassa~., data = treino, method="nnet", trainControl = control, trace = F)
rna
##Aplica o modelo no arquivo de teste
predict.rna <- predict(rna,teste)
rmse(teste$biomassa, predict.rna)
mae(teste$biomassa, predict.rna)
cor(teste$biomassa, predict.rna, method = "pearson")
# regressão Syx
Syx <- function(predito, observado, p) {
return(sqrt(sum((observado - predito)^2) / (length(observado) - p)))
}
Syx(predict.rna,teste$biomassa,ncol(teste) - 1)
r2 <- function(predito, observado){ return (1 - (sum((predito-observado)^2)/sum((observado-mean(observado))^2)))}
r2(predict.rna, teste$biomassa)
### Pacotes necessários
#install.packages("e1071")
#install.packages("caret")
library("caret")
library(Metrics)
##Leitura da database
setwd("D:/GIT/IAA008-AprendizadoMaquina/")
dados <- read.csv("databases/6 - Veiculos - Dados.csv", header = T)
dados$a <- NULL
View(dados)
#(Ano atual com 4 dígitos + 2 algarismos do dígito verificador do CPF de um dos integrantes)
set.seed(2034)
ind <-createDataPartition(dados$tipo, p=0.80, list=FALSE)
treino <-dados[ind,]
teste <-dados[-ind,]
km.res = kmeans(ind,4)
print(km.res)
km.res = kmeans(ind)
km.res = kmeans(ind,10)
print(km.res)
km.res = kmeans(dados,10)
table(km.res, dados$tipo)
km.res = kmeans(ind,10)
print(km.res)
table(km.res, dados$tipo)
table(km.res$cluster, dados$tipo)
table(km.res$cluster, ind$tipo)
table(km.res$cluster, ind)
